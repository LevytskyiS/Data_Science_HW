import random

import numpy as np


# Лінійні операції з векторами
a = [3, 5, 6, 4]
b = [2, 5, 7, 7]

a = np.array(a)
b = np.array(b)

с = a + b
d = a - b
e = a * b
f = a / b
g = np.dot(a, b)  # Скалярний добуток

# Базисний набір векторів

# Матриці

matrix = np.array([[2, 4, 6, 7, 6], [1, 3, 8, 7, 5], [1, 4, 6, 5, 3], [2, 4, 6, 7, 6]])
r = matrix[0, 2]  # рядок з індексом 0 і в ньому елемент з індексом 2

# slices
sl = matrix[:2, 2:]  # 2 рядки [0, 1] по 3 останніх елементи в кожному з них

# Операції з матрицями:
# Множення на скаляр
# Додавання скаляру
# Перемноження двох матриць однакового розміру (поелементне множення)
# Поелементне ділення
# Матричне множення

matrix_1 = np.array(
    [[2, 4, 6, 7, 6], [1, 3, 8, 7, 5], [1, 4, 6, 5, 3], [2, 4, 6, 7, 6]]
)

ones = np.ones((4, 3))
zeros = np.zeros(ones.shape)
transp_zeros = zeros.T  # Транспонування (Матриця 4х3 стала 3х4)

res_1 = ones * zeros  # Перемноження двох матриць однакового розміру
res_2 = np.dot(ones, transp_zeros)

t_ones = ones.T

res_3 = np.dot(t_ones, matrix)

n = np.dot(t_ones[0], matrix[:, 1])


a = [[0] * 3] * 3

matrix_3 = np.random.rand(4, 4)
matrix_2 = np.random.randint(1, 10, size=(5, 5))

u = np.random.randint(10, size=10)
j = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

res_4 = u + j
res_5 = u - j
res_6 = u * j

w = np.random.randint(10, size=7)
e = np.random.randint(10, size=7)

res_7 = np.dot(w, e)

# Створіть дві матриці розміром 2x2 та 2x3, заповніть їх випадковими цілими числами в діапазоні від 1 до 10 та перемножте їх між собою.

matrix_4 = np.random.randint(1, 10, size=(2, 2)).reshape(4, 1)
matrix_5 = np.random.randint(1, 10, size=(3, 3)).reshape(1, 9)
res_8 = np.dot(matrix_4, matrix_5)

# Task 8

matrix_6 = np.random.randint(1, 10, size=(3, 3))
matrix_6_inv = np.linalg.inv(matrix_6)

# Task 9 Створіть матрицю розміром 4x4, заповніть її випадковими дійсними числами в діапазоні від 0 до 1 та транспонуйте її.
matrix_7_T = np.random.rand(4, 4).T

# Task 10 Створіть матрицю розміром 3x4 та вектор розміром 4, заповніть їх випадковими цілими числами в діапазоні від 1 до 10 та перемножте матрицю на вектор.
matrix_8 = np.random.randint(1, 10, size=(3, 4))
r = np.random.randint(10, size=4)
res_9 = matrix_8.dot(r)

# Task 11 Створіть матрицю розміром 2x3 та вектор розміром 3, заповніть їх випадковими дійсними числами в діапазоні від 0 до 1 та перемножте матрицю на вектор.
matrix_9 = np.random.rand(2, 3)
t = np.random.rand(3)
res_10 = matrix_9.dot(t)

# Task 12 Створіть дві матриці розміром 2x2, заповніть їх випадковими цілими числами в діапазоні від 1 до 10 та виконайте їхнє поелементне множення.
matrix_10 = np.random.randint(1, 10, size=(2, 2))
matrix_11 = np.random.randint(1, 10, size=(2, 2))
res_11 = np.multiply(matrix_10, matrix_11)

# Task 13 Створіть дві матриці розміром 2x2, заповніть їх випадковими цілими числами в діапазоні від 1 до 10 та знайдіть їх добуток.
matrix_12 = np.random.randint(1, 10, size=(2, 2))
matrix_13 = np.random.randint(1, 10, size=(2, 2))
res_12 = np.dot(matrix_10, matrix_11)

# Task 14 Створіть матрицю розміром 5x5, заповніть її випадковими цілими числами в діапазоні від 1 до 100 та знайдіть суму елементів матриці.
matrix_14 = np.random.randint(1, 100, size=(5, 5))
res_13 = np.sum(matrix_14)

# Task 15 Створіть дві матриці розміром 4x4, заповніть їх випадковими цілими числами в діапазоні від 1 до 10 та знайдіть їхню різницю.
matrix_15 = np.random.randint(1, 10, size=(4, 4))
res_14 = matrix_15.max() - matrix_15.min()

# Task 16 Створіть матрицю розміром 3x3, заповніть її випадковими дійсними числами в діапазоні від 0 до 1 та знайдіть вектор-стовпчик, що містить суму елементів кожного рядка матриці.
matrix_16 = np.random.rand(3, 3)
res_15 = np.sum(matrix_16, axis=1)

# Task 17 Створіть матрицю розміром 3x4 з довільними цілими числами і створінь матрицю з квадратами цих чисел.
matrix_16 = np.random.randint(1, 10, size=(3, 4)) ** 2

# Task 18 Створіть вектор розміром 4, заповніть його випадковими цілими числами в діапазоні від 1 до 50 та знайдіть вектор з квадратними коренями цих чисел.
o = np.random.randint(50, size=4) ** 0.5
